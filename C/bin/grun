#!/usr/bin/bash

# if needed, compile memfd_create.c
mfc=$(dirname "$0")/../memfd_create
if [[ $mfc.c -nt $mfc ]]; then /usr/bin/gcc "$mfc.c" -o "$mfc"; fi

# check for "-run" arg
args=($*)
for((i=0; i<$#; ++i))
do
  if [[ ${args[$i]} == "-run" ]]; then break; fi
done

# in case no "-run" arg found, compile with real compiler
cmp=$(basename "$0")
if [[ $i -ge $# ]]; then "/usr/bin/$cmp" "$@"; exit; fi

# determine language, options for real compiler and src language
if [[ "$cmp" == "gcc" ]]; then lng=c; else lng=c++; fi
opts=${args[*]:0:$i}
shift $((i+1))
src=$1
shift

# for execution as command processor
function shebang() {
  IFS=''

  read -r line
  if [[ ${line:0:2} != "#!" ]]; then echo "$line"; fi

  while read -r line
  do
    echo "$line" 
  done
}

# read memory file name
read -r pid mfd < <($mfc &)
mnt="/proc/$pid/fd"
mf="$mnt/$mfd"

# create 10MB filesystem into memory file
dd if=/dev/zero of="$mf" bs=1024 count=10240 2> /dev/null
mkfs.ext2 "$mf" 2>&1 | cat > /dev/null 

# mount that filesystem, and switch ownership to pi user
sudo mount "$mf" "$mnt"
sudo chown pi. "$mnt"

# compile $src, store executable in memory file ...
TMPDIR="$mnt" "/usr/bin/$cmp" $opts -o $mnt/doit -x $lng <(shebang < "$src")

# ... and execute it with args
"$mnt/doit" "$@"

# terminate memfd_create.c in order to close memory file
kill "$pid"
